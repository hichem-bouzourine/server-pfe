// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type_User {
  ADMIN
  ARTISAN
  CLIENT
  FOURNISSEUR
}

enum Resultat_signalement{
  ACCEPTE
  REFUSE
  NON_TRAITE
}

model Utilisateur {
  id_utilisateur      Int      @id @default(autoincrement())
  nom                 String
  prenom              String
  date_de_naissance   DateTime
  sexe                String
  id_adresse          Int
  email               String  @unique
  password            String
  telephone           String
  type                Type_User
  date_inscription    DateTime @default(now())
  photo               String?
  Administrateur      Administrateur?    
  Artisan             Artisan?           
  Client              Client?            
  Fournisseur         Fournisseur?

  adresse             Adresse @relation(fields: [id_adresse], references: [id], onDelete: Cascade)
  
  startedConversations       Conversation[] @relation("startedConvBy")
  repliedConversations       Conversation[] @relation("repliedConvTo")

  messages            Message[]
  Sauvegarde          Sauvegarde[] 

  Notes               Note[] 
  Avis                Avis[] 

  reportedProfiles    SignalementProfil[] @relation("reported_profiles")
  reportedBy          SignalementProfil[] @relation("reports")
}

model Administrateur {
  id_admin        Int      @id
  
  Utilisateur     Utilisateur     @relation(fields: [id_admin], references: [id_utilisateur], onDelete: Cascade)

  SignalementProfil SignalementProfil[]
  SignalementOeuvre SignalementOeuvre[]
  SignalementAvis SignalementAvis[]
}

model Artisan {
  id_artisan       Int      @id
  description      String
  annee_debut_experience Int
  specialite       Int
  statutCompte     Boolean
  
  Utilisateur      Utilisateur     @relation(fields: [id_artisan], references: [id_utilisateur], onDelete: Cascade)
  categorie        Categorie       @relation(fields: [specialite], references: [id_categorie], onDelete: Cascade)
  
  Oeuvres          Oeuvre[]
  Commandes        Commande[]       
  Reponse          Reponse[]        
}

model Client {
  id_client          Int      @id
  preference_art     Int      
  
  Utilisateur        Utilisateur @relation(fields: [id_client], references: [id_utilisateur], onDelete: Cascade)
  categorie          Categorie @relation(fields: [preference_art], references: [id_categorie], onDelete: Cascade)
  
  
  Achats             Achat[]
  SignalementOeuvre  SignalementOeuvre[] 
  SignalementAvis    SignalementAvis[] 
  ConsulteCategorie  ConsulteCategorie[] 
  ConsulteOeuvre     ConsulteOeuvre[] 
}

model Wilaya {
  id                  Int       @id   @default(autoincrement())
  nom                 String

  dairas              Daira[]
}

model Daira {
  id                  Int       @id   @default(autoincrement())
  nom                 String
  id_wilaya           Int

  wilaya              Wilaya @relation(fields: [id_wilaya], references: [id], onDelete: Cascade)

  communes            Commune[]
}

model Commune {
  id                  Int       @id   @default(autoincrement())
  nom                 String
  code_postal         Int?
  id_daira            Int

  daira               Daira @relation(fields: [id_daira], references: [id], onDelete: Cascade)

  adresses            Adresse[]
}

model Adresse {
  id                  Int       @id   @default(autoincrement())
  Rue                 String
  id_Commune          Int

  commune             Commune @relation(fields: [id_Commune], references: [id], onDelete: Cascade)

  utilisateurs        Utilisateur[]
  commandes           Commande[]
}

model Fournisseur {
  id_fournisseur   Int      @id
  raison_social    String
  statutCompte     Boolean
  
  Utilisateur      Utilisateur    @relation(fields: [id_fournisseur], references: [id_utilisateur], onDelete: Cascade)
  
  PublicationFournitures       PublicationFourniture[]
  CommandesPrisesEnCharge      Commande[]
}

model Fourniture {
  id_fourniture         Int           @id @default(autoincrement())
  nom_fourniture        String
  photo                 String[]
  
  PublicationFournitures       PublicationFourniture[]
  Commandes             Commande[]
  
}

model PublicationFourniture {
  id_fournisseur        Int
  id_fourniture         Int
  prix                  Float
  quantite              Int

  
  fournisseur           Fournisseur  @relation(fields: [id_fournisseur], references: [id_fournisseur], onDelete: Cascade)
  fourniture            Fourniture   @relation(fields: [id_fourniture], references: [id_fourniture], onDelete: Cascade)

  @@id([id_fournisseur, id_fourniture])

}


model Commande {
  id_commande       Int            @id @default(autoincrement())
  etat_commande     Boolean
  date_commande     DateTime
  quantite          Int
  adresse_livraison Int
  id_fourniture     Int
  id_artisan        Int
  id_fournisseur    Int
  
  adresse           Adresse       @relation(fields: [adresse_livraison], references: [id], onDelete: Cascade)
  fourniture        Fourniture    @relation(fields: [id_fourniture], references: [id_fourniture], onDelete: Cascade)
  artisan           Artisan       @relation(fields: [id_artisan], references: [id_artisan], onDelete: Cascade)
  fournisseur       Fournisseur   @relation(fields: [id_fournisseur], references: [id_fournisseur], onDelete: Cascade)
  
}

model Oeuvre {
  id_oeuvre                Int           @id @default(autoincrement())
  titre_oeuvre             String
  date_realisation         DateTime
  contexte_realisation     String
  dimensions               String
  description              String
  techniques_et_materiaux  String
  prix                     Float
  date_publication         DateTime
  images_oeuvre            String[]
  id_categorie             Int
  id_artisan               Int
  
  categorie                Categorie    @relation(fields: [id_categorie], references: [id_categorie], onDelete: Cascade)
  artisan                  Artisan      @relation(fields: [id_artisan], references: [id_artisan], onDelete: Cascade)
  
  materiaux                 UtiliseMateriau[]
  techniques                 UtiliseTechnique[]
  achats                   Achat[]
  Notes                    Note[]
  Avis                     Avis[]
  SignalementOeuvre        SignalementOeuvre[]
  Sauvegardes              Sauvegarde[]
  ConsulteOeuvre           ConsulteOeuvre[]
}

model Materiau {
  id                Int @id @default(autoincrement())
  nom               String

  utilisation       UtiliseMateriau[]
}
model Technique {
  id                Int @id @default(autoincrement())
  nom               String

  utilisation       UtiliseTechnique[]
}

model UtiliseMateriau {
  id_oeuvre         Int
  id_materiau       Int

  oeuvre            Oeuvre @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  materiau          Materiau @relation(fields: [id_materiau], references: [id], onDelete: Cascade)

  @@id([id_materiau, id_oeuvre])
}
model UtiliseTechnique {
  id_oeuvre         Int
  id_technique      Int

  oeuvre            Oeuvre @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  technique         Technique @relation(fields: [id_technique], references: [id], onDelete: Cascade)

  @@id([id_technique, id_oeuvre])
}

model Categorie {
  id_categorie     Int       @id @default(autoincrement())
  nom_categorie    String
  image_categorie  String
  description      String?

  oeuvres          Oeuvre[]
  ConsulteCategorie ConsulteCategorie[]
  clients          Client[]
  artisans         Artisan[]
}

model Achat {
  id_achat    Int      @id @default(autoincrement())
  etat_achat  String
  date_achat  DateTime
  id_oeuvre   Int
  id_client   Int
  
  oeuvre      Oeuvre    @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  client      Client   @relation(fields: [id_client], references: [id_client], onDelete: Cascade)
}

model Conversation {
  id_conversation  Int        @id @default(autoincrement())
  id_user1         Int
  id_user2         Int
  
  user1            Utilisateur     @relation("startedConvBy" ,fields: [id_user1], references: [id_utilisateur], onDelete: Cascade)
  user2            Utilisateur     @relation("repliedConvTo" ,fields: [id_user2], references: [id_utilisateur], onDelete: Cascade)
  
  messages         Message[]
}

model Message {
  id_message       Int           @id @default(autoincrement())
  date_message     DateTime      @default(now())
  contenu          String
  id_destinateur   Int
  id_conversation  Int

  utilisateur      Utilisateur   @relation(fields: [id_destinateur], references: [id_utilisateur], onDelete: Cascade)
  conversation     Conversation  @relation(fields: [id_conversation], references: [id_conversation], onDelete: Cascade)
}

model Note {
  id_utilisateur    Int
  id_oeuvre    Int
  note         Int
  
  utilisateur  Utilisateur    @relation(fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)
  oeuvre       Oeuvre    @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  @@id([id_utilisateur, id_oeuvre])
}

model Avis {
  id_avis     Int         @id @default(autoincrement())
  id_utilisateur   Int
  id_oeuvre   Int
  contenu     String
  date_avis   DateTime    @default(now())
  
  utilisateur Utilisateur      @relation(fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)
  Oeuvre      Oeuvre      @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  
  reponse     Reponse[]
  SignalementAvis SignalementAvis[]
}

model Reponse {
  id_artisan  Int
  id_avis     Int
  contenu     String
  date_reponse DateTime   @default(now())
  
  Artisan     Artisan     @relation(fields: [id_artisan], references: [id_artisan], onDelete: Cascade)
  Avis        Avis        @relation(fields: [id_avis], references: [id_avis], onDelete: Cascade)
  
  @@id([id_artisan, id_avis])
}

model SignalementProfil {
  id_signalement    Int    @id @default(autoincrement())
  raison            String
  date              DateTime      @default(now())
  id_signale        Int?
  id_rapporteur     Int?
  id_admin          Int?
  etatSignalement   Boolean      
  resultat          Boolean?      

  UtilisateurSignale       Utilisateur?      @relation("reported_profiles" ,fields: [id_signale], references: [id_utilisateur], onDelete: SetNull)
  UtilisateurRapporteur    Utilisateur?      @relation("reports" ,fields: [id_rapporteur], references: [id_utilisateur], onDelete: SetNull)
  Administrateur    Administrateur?    @relation(fields: [id_admin], references: [id_admin], onDelete: SetNull)
}

model SignalementOeuvre {
  id_signalement    Int    @id @default(autoincrement())
  raison            String
  date              DateTime      @default(now())
  id_oeuvre         Int?
  id_client         Int?
  id_admin          Int?
  etatSignalement   Boolean      
  resultat          Boolean?      

  Oeuvre            Oeuvre?   @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: SetNull)
  Client            Client?      @relation(fields: [id_client], references: [id_client], onDelete: SetNull)
  Administrateur    Administrateur?    @relation(fields: [id_admin], references: [id_admin], onDelete: SetNull)
}

model SignalementAvis {
  id_signalement    Int    @id @default(autoincrement())
  raison            String
  date              DateTime      @default(now())
  id_avis           Int?
  id_client         Int?
  id_admin          Int?
  etatSignalement   Boolean
  resultat          Boolean?      

  Avis              Avis?    @relation(fields: [id_avis], references: [id_avis], onDelete: SetNull)
  Client            Client?      @relation(fields: [id_client], references: [id_client], onDelete: SetNull)
  Administrateur    Administrateur?    @relation(fields: [id_admin], references: [id_admin], onDelete: SetNull)
}

model ConsulteCategorie {
  id_client      Int
  id_categorie   Int
  
  Client         Client @relation(fields: [id_client], references: [id_client], onDelete: Cascade)
  Categorie      Categorie @relation(fields: [id_categorie], references: [id_categorie], onDelete: Cascade)

  @@id([id_client,id_categorie])
}

model ConsulteOeuvre {
  id_client     Int
  id_oeuvre     Int
  
  Client        Client @relation(fields: [id_client], references: [id_client], onDelete: Cascade)
  Oeuvre        Oeuvre @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  
  @@id([id_client,id_oeuvre])
}

model Sauvegarde {
  id_utilisateur Int
  id_oeuvre      Int
  
  Utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)
  Oeuvre         Oeuvre @relation(fields: [id_oeuvre], references: [id_oeuvre], onDelete: Cascade)
  @@id([id_utilisateur,id_oeuvre])
}
